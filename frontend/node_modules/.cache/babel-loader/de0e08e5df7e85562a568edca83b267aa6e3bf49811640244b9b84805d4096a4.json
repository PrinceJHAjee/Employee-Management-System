{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:5000';\nconst handleResponse = async response => {\n  try {\n    if (!response.ok) {\n      const contentType = response.headers.get('content-type');\n      if (contentType && contentType.includes('application/json')) {\n        const error = await response.json();\n        console.error('Server error:', error.message || 'Something went wrong');\n        throw new Error(error.message || 'Something went wrong');\n      } else {\n        // Handle non-JSON error responses\n        const errorText = await response.text();\n        console.error('Server error:', errorText || 'Something went wrong');\n        throw new Error(errorText || 'Something went wrong');\n      }\n    }\n\n    // Handle non-JSON responses here (e.g., success messages)\n    const contentType = response.headers.get('content-type');\n    if (contentType && contentType.includes('application/json')) {\n      return response.json();\n    } else {\n      return response.text(); // Return plain text for non-JSON responses\n    }\n  } catch (error) {\n    console.error('Error handling response:', error);\n    throw error;\n  }\n};\nconst getAuthHeaders = () => {\n  const token = localStorage.getItem('token');\n  return {\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${token}`\n  };\n};\nconst getUploadHeaders = () => {\n  const token = localStorage.getItem('token');\n  return {\n    'Authorization': `Bearer ${token}`\n  };\n};\nexport const login = async credentials => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(credentials)\n    });\n    return handleResponse(response);\n  } catch (error) {\n    console.error('Login error:', error);\n    throw error;\n  }\n};\nexport const register = async user => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/auth/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(user)\n    });\n    return handleResponse(response);\n  } catch (error) {\n    console.error('Registration error:', error);\n    throw error;\n  }\n};\nexport const fetchEmployees = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/employees`, {\n      method: 'GET',\n      headers: getAuthHeaders()\n    });\n    return handleResponse(response);\n  } catch (error) {\n    console.error('Fetch employees error:', error);\n    throw error;\n  }\n};\nexport const getEmployee = async id => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/employees/${id}`, {\n      method: 'GET',\n      headers: getAuthHeaders()\n    });\n    return handleResponse(response);\n  } catch (error) {\n    console.error('Get employee error:', error);\n    throw error;\n  }\n};\nexport const updateEmployee = async (id, employee) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/employees/${id}`, {\n      method: 'PUT',\n      headers: getAuthHeaders(),\n      body: JSON.stringify(employee)\n    });\n    return handleResponse(response);\n  } catch (error) {\n    console.error('Update employee error:', error);\n    throw error;\n  }\n};\nexport const createEmployee = async employee => {\n  try {\n    let response;\n\n    // Check if formData has a file\n    if (employee.f_Image instanceof File) {\n      const formData = new FormData();\n      formData.append('f_Name', employee.f_Name);\n      formData.append('f_Email', employee.f_Email);\n      formData.append('f_Mobile', employee.f_Mobile);\n      formData.append('f_Designation', employee.f_Designation);\n      formData.append('f_gender', employee.f_gender);\n      formData.append('f_Course', JSON.stringify(employee.f_Course)); // Converting array to JSON string\n      formData.append('f_Image', employee.f_Image); // Appending the file\n\n      response = await fetch(`${API_BASE_URL}/employees`, {\n        method: 'POST',\n        headers: getUploadHeaders(),\n        body: formData\n      });\n    } else {\n      response = await fetch(`${API_BASE_URL}/employees`, {\n        method: 'POST',\n        headers: getAuthHeaders(),\n        body: JSON.stringify(employee)\n      });\n    }\n    return handleResponse(response);\n  } catch (error) {\n    console.error('Create employee error:', error);\n    throw error;\n  }\n};\nexport const deleteEmployee = async id => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/employees/${id}`, {\n      method: 'DELETE',\n      headers: getAuthHeaders() // Include authentication headers if required\n    });\n    return handleResponse(response);\n  } catch (error) {\n    console.error('Delete employee error:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_BASE_URL","handleResponse","response","ok","contentType","headers","get","includes","error","json","console","message","Error","errorText","text","getAuthHeaders","token","localStorage","getItem","Authorization","getUploadHeaders","login","credentials","fetch","method","body","JSON","stringify","register","user","fetchEmployees","getEmployee","id","updateEmployee","employee","createEmployee","f_Image","File","formData","FormData","append","f_Name","f_Email","f_Mobile","f_Designation","f_gender","f_Course","deleteEmployee"],"sources":["C:/Users/Prince Kumar Jha/OneDrive/Desktop/EMS/Employee-Management-MERN/frontend/src/api.js"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:5000';\r\n\r\n\r\nconst handleResponse = async (response) => {\r\n  try {\r\n    if (!response.ok) {\r\n      const contentType = response.headers.get('content-type');\r\n      \r\n      if (contentType && contentType.includes('application/json')) {\r\n        const error = await response.json();\r\n        console.error('Server error:', error.message || 'Something went wrong');\r\n        throw new Error(error.message || 'Something went wrong');\r\n      } else {\r\n        // Handle non-JSON error responses\r\n        const errorText = await response.text();\r\n        console.error('Server error:', errorText || 'Something went wrong');\r\n        throw new Error(errorText || 'Something went wrong');\r\n      }\r\n    }\r\n\r\n    // Handle non-JSON responses here (e.g., success messages)\r\n    const contentType = response.headers.get('content-type');\r\n    if (contentType && contentType.includes('application/json')) {\r\n      return response.json();\r\n    } else {\r\n      return response.text(); // Return plain text for non-JSON responses\r\n    }\r\n  } catch (error) {\r\n    console.error('Error handling response:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst getAuthHeaders = () => {\r\n  const token = localStorage.getItem('token');\r\n  return {\r\n    'Content-Type': 'application/json',\r\n    Authorization: `Bearer ${token}`,\r\n  };\r\n};\r\n\r\nconst getUploadHeaders = () => {\r\n  const token = localStorage.getItem('token');\r\n  return {\r\n    'Authorization': `Bearer ${token}`,\r\n  };\r\n};\r\n\r\nexport const login = async (credentials) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/api/auth/login`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(credentials),\r\n    });\r\n    return handleResponse(response);\r\n  } catch (error) {\r\n    console.error('Login error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const register = async (user) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/api/auth/register`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(user),\r\n    });\r\n    return handleResponse(response);\r\n  } catch (error) {\r\n    console.error('Registration error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchEmployees = async () => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/api/employees`, {\r\n      method: 'GET',\r\n      headers: getAuthHeaders(),\r\n    });\r\n    return handleResponse(response);\r\n  } catch (error) {\r\n    console.error('Fetch employees error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getEmployee = async (id) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/employees/${id}`, {\r\n      method: 'GET',\r\n      headers: getAuthHeaders(),\r\n    });\r\n    return handleResponse(response);\r\n  } catch (error) {\r\n    console.error('Get employee error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const updateEmployee = async (id, employee) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/employees/${id}`, {\r\n      method: 'PUT',\r\n      headers: getAuthHeaders(),\r\n      body: JSON.stringify(employee),\r\n    });\r\n    return handleResponse(response);\r\n  } catch (error) {\r\n    console.error('Update employee error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const createEmployee = async (employee) => {\r\n  try {\r\n    let response;\r\n\r\n    // Check if formData has a file\r\n    if (employee.f_Image instanceof File) {\r\n      const formData = new FormData();\r\n      formData.append('f_Name', employee.f_Name);\r\n      formData.append('f_Email', employee.f_Email);\r\n      formData.append('f_Mobile', employee.f_Mobile);\r\n      formData.append('f_Designation', employee.f_Designation);\r\n      formData.append('f_gender', employee.f_gender);\r\n      formData.append('f_Course', JSON.stringify(employee.f_Course)); // Converting array to JSON string\r\n      formData.append('f_Image', employee.f_Image); // Appending the file\r\n      \r\n      response = await fetch(`${API_BASE_URL}/employees`, {\r\n        method: 'POST',\r\n        headers: getUploadHeaders(),\r\n        body: formData,\r\n      });\r\n    } else {\r\n      response = await fetch(`${API_BASE_URL}/employees`, {\r\n        method: 'POST',\r\n        headers: getAuthHeaders(),\r\n        body: JSON.stringify(employee),\r\n      });\r\n    }\r\n\r\n    return handleResponse(response);\r\n  } catch (error) {\r\n    console.error('Create employee error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\nexport const deleteEmployee = async (id) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/employees/${id}`, {\r\n      method: 'DELETE',\r\n      headers: getAuthHeaders(), // Include authentication headers if required\r\n    });\r\n\r\n    return handleResponse(response);\r\n  } catch (error) {\r\n    console.error('Delete employee error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}